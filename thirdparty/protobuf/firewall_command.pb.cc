// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "firewall_command.pb.h"
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>

namespace HoneyClient {
namespace Message {
namespace Firewall {

namespace {

const ::google::protobuf::Descriptor* Command_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Command_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Command_ActionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Command_ResponseType_descriptor_ = NULL;

}  // namespace


void protobuf_BuildDesc_firewall_5fcommand_2eproto_AssignGlobalDescriptors(const ::google::protobuf::FileDescriptor* file) {
  Command_descriptor_ = file->message_type(0);
  Command::default_instance_ = new Command();
  static const int Command_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, err_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, chain_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, mac_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, ip_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, protocol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, port_),
  };
  Command_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Command_descriptor_,
      Command::default_instance_,
      Command_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      sizeof(Command));
  Command_ActionType_descriptor_ = Command_descriptor_->enum_type(0);
  Command_ResponseType_descriptor_ = Command_descriptor_->enum_type(1);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Command_descriptor_, Command::default_instance_);
  Command::default_instance_->InitAsDefaultInstance();
}

void protobuf_BuildDesc_firewall_5fcommand_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;
  ::google::protobuf::DescriptorPool* pool =
    ::google::protobuf::DescriptorPool::internal_generated_pool();

  pool->InternalBuildGeneratedFile(
    "\n\026firewall_command.proto\022\034HoneyClient.Me"
    "ssage.Firewall\"\211\003\n\007Command\022I\n\006action\030\001 \002"
    "(\01620.HoneyClient.Message.Firewall.Comman"
    "d.ActionType:\007UNKNOWN\022K\n\010response\030\002 \001(\0162"
    "2.HoneyClient.Message.Firewall.Command.R"
    "esponseType:\005ERROR\022\023\n\013err_message\030\003 \001(\t\022"
    "\022\n\nchain_name\030\004 \001(\t\022\023\n\013mac_address\030\005 \001(\t"
    "\022\022\n\nip_address\030\006 \001(\t\022\020\n\010protocol\030\007 \001(\t\022\014"
    "\n\004port\030\010 \003(\r\"Q\n\nActionType\022\013\n\007UNKNOWN\020\001\022"
    "\014\n\010DENY_ALL\020\002\022\013\n\007DENY_VM\020\003\022\014\n\010ALLOW_VM\020\004"
    "\022\r\n\tALLOW_ALL\020\005\"!\n\014ResponseType\022\t\n\005ERROR"
    "\020\001\022\006\n\002OK\020\002B,\n(org.honeyclient.Message.Fi"
    "rewall.CommandH\001", 496,
  &protobuf_BuildDesc_firewall_5fcommand_2eproto_AssignGlobalDescriptors);
}

// Force BuildDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_firewall_5fcommand_2eproto {
  StaticDescriptorInitializer_firewall_5fcommand_2eproto() {
    protobuf_BuildDesc_firewall_5fcommand_2eproto();
  }
} static_descriptor_initializer_firewall_5fcommand_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* Command_ActionType_descriptor() {
  if (Command_ActionType_descriptor_ == NULL) protobuf_BuildDesc_firewall_5fcommand_2eproto();
  return Command_ActionType_descriptor_;
}
bool Command_ActionType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Command_ActionType Command::UNKNOWN;
const Command_ActionType Command::DENY_ALL;
const Command_ActionType Command::DENY_VM;
const Command_ActionType Command::ALLOW_VM;
const Command_ActionType Command::ALLOW_ALL;
const Command_ActionType Command::ActionType_MIN;
const Command_ActionType Command::ActionType_MAX;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Command_ResponseType_descriptor() {
  if (Command_ResponseType_descriptor_ == NULL) protobuf_BuildDesc_firewall_5fcommand_2eproto();
  return Command_ResponseType_descriptor_;
}
bool Command_ResponseType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Command_ResponseType Command::ERROR;
const Command_ResponseType Command::OK;
const Command_ResponseType Command::ResponseType_MIN;
const Command_ResponseType Command::ResponseType_MAX;
#endif  // _MSC_VER


const ::std::string Command::_default_err_message_;
const ::std::string Command::_default_chain_name_;
const ::std::string Command::_default_mac_address_;
const ::std::string Command::_default_ip_address_;
const ::std::string Command::_default_protocol_;

Command::Command()
  : ::google::protobuf::Message(),
    _cached_size_(0),
    action_(1),
    response_(1),
    err_message_(const_cast< ::std::string*>(&_default_err_message_)),
    chain_name_(const_cast< ::std::string*>(&_default_chain_name_)),
    mac_address_(const_cast< ::std::string*>(&_default_mac_address_)),
    ip_address_(const_cast< ::std::string*>(&_default_ip_address_)),
    protocol_(const_cast< ::std::string*>(&_default_protocol_)) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

void Command::InitAsDefaultInstance() {}

Command::Command(const Command& from)
  : ::google::protobuf::Message(),
    _cached_size_(0),
    action_(1),
    response_(1),
    err_message_(const_cast< ::std::string*>(&_default_err_message_)),
    chain_name_(const_cast< ::std::string*>(&_default_chain_name_)),
    mac_address_(const_cast< ::std::string*>(&_default_mac_address_)),
    ip_address_(const_cast< ::std::string*>(&_default_ip_address_)),
    protocol_(const_cast< ::std::string*>(&_default_protocol_)) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

Command::~Command() {
  if (err_message_ != &_default_err_message_) {
    delete err_message_;
  }
  if (chain_name_ != &_default_chain_name_) {
    delete chain_name_;
  }
  if (mac_address_ != &_default_mac_address_) {
    delete mac_address_;
  }
  if (ip_address_ != &_default_ip_address_) {
    delete ip_address_;
  }
  if (protocol_ != &_default_protocol_) {
    delete protocol_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Command::descriptor() {
  if (Command_descriptor_ == NULL) protobuf_BuildDesc_firewall_5fcommand_2eproto();
  return Command_descriptor_;
}

const Command& Command::default_instance() {
  if (default_instance_ == NULL) protobuf_BuildDesc_firewall_5fcommand_2eproto();
  return *default_instance_;
}

Command* Command::default_instance_ = NULL;

Command* Command::New() const {
  return new Command;
}

void Command::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    action_ = 1;
    response_ = 1;
    if (_has_bit(2)) {
      if (err_message_ != &_default_err_message_) {
        err_message_->clear();
      }
    }
    if (_has_bit(3)) {
      if (chain_name_ != &_default_chain_name_) {
        chain_name_->clear();
      }
    }
    if (_has_bit(4)) {
      if (mac_address_ != &_default_mac_address_) {
        mac_address_->clear();
      }
    }
    if (_has_bit(5)) {
      if (ip_address_ != &_default_ip_address_) {
        ip_address_->clear();
      }
    }
    if (_has_bit(6)) {
      if (protocol_ != &_default_protocol_) {
        protocol_->clear();
      }
    }
  }
  port_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required .HoneyClient.Message.Firewall.Command.ActionType action = 1 [default = UNKNOWN];
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormat::ReadEnum(input, &value));
        if (::HoneyClient::Message::Firewall::Command_ActionType_IsValid(value)) {
          set_action(static_cast< ::HoneyClient::Message::Firewall::Command_ActionType >(value));
        } else {
          mutable_unknown_fields()->AddField(1)->add_varint(value);
        }
        if (input->ExpectTag(16)) goto parse_response;
        break;
      }
      
      // optional .HoneyClient.Message.Firewall.Command.ResponseType response = 2 [default = ERROR];
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_response:
        int value;
        DO_(::google::protobuf::internal::WireFormat::ReadEnum(input, &value));
        if (::HoneyClient::Message::Firewall::Command_ResponseType_IsValid(value)) {
          set_response(static_cast< ::HoneyClient::Message::Firewall::Command_ResponseType >(value));
        } else {
          mutable_unknown_fields()->AddField(2)->add_varint(value);
        }
        if (input->ExpectTag(26)) goto parse_err_message;
        break;
      }
      
      // optional string err_message = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_err_message:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_err_message()));
        if (input->ExpectTag(34)) goto parse_chain_name;
        break;
      }
      
      // optional string chain_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_chain_name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_chain_name()));
        if (input->ExpectTag(42)) goto parse_mac_address;
        break;
      }
      
      // optional string mac_address = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_mac_address:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_mac_address()));
        if (input->ExpectTag(50)) goto parse_ip_address;
        break;
      }
      
      // optional string ip_address = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ip_address:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_ip_address()));
        if (input->ExpectTag(58)) goto parse_protocol;
        break;
      }
      
      // optional string protocol = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_protocol:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_protocol()));
        if (input->ExpectTag(64)) goto parse_port;
        break;
      }
      
      // repeated uint32 port = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_port:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_port(value);
        if (input->ExpectTag(64)) goto parse_port;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

bool Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  // required .HoneyClient.Message.Firewall.Command.ActionType action = 1 [default = UNKNOWN];
  if (_has_bit(0)) {
    DO_(::google::protobuf::internal::WireFormat::WriteEnum(1, this->action(), output));
  }
  
  // optional .HoneyClient.Message.Firewall.Command.ResponseType response = 2 [default = ERROR];
  if (_has_bit(1)) {
    DO_(::google::protobuf::internal::WireFormat::WriteEnum(2, this->response(), output));
  }
  
  // optional string err_message = 3;
  if (_has_bit(2)) {
    DO_(::google::protobuf::internal::WireFormat::WriteString(3, this->err_message(), output));
  }
  
  // optional string chain_name = 4;
  if (_has_bit(3)) {
    DO_(::google::protobuf::internal::WireFormat::WriteString(4, this->chain_name(), output));
  }
  
  // optional string mac_address = 5;
  if (_has_bit(4)) {
    DO_(::google::protobuf::internal::WireFormat::WriteString(5, this->mac_address(), output));
  }
  
  // optional string ip_address = 6;
  if (_has_bit(5)) {
    DO_(::google::protobuf::internal::WireFormat::WriteString(6, this->ip_address(), output));
  }
  
  // optional string protocol = 7;
  if (_has_bit(6)) {
    DO_(::google::protobuf::internal::WireFormat::WriteString(7, this->protocol(), output));
  }
  
  // repeated uint32 port = 8;
  for (int i = 0; i < port_.size(); i++) {
    DO_(::google::protobuf::internal::WireFormat::WriteUInt32(8, this->port(i), output));
  }
  
  if (!unknown_fields().empty()) {
    DO_(::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output));
  }
  return true;
#undef DO_
}

int Command::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HoneyClient.Message.Firewall.Command.ActionType action = 1 [default = UNKNOWN];
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::EnumSize(this->action());
    }
    
    // optional .HoneyClient.Message.Firewall.Command.ResponseType response = 2 [default = ERROR];
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::EnumSize(this->response());
    }
    
    // optional string err_message = 3;
    if (has_err_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->err_message());
    }
    
    // optional string chain_name = 4;
    if (has_chain_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->chain_name());
    }
    
    // optional string mac_address = 5;
    if (has_mac_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->mac_address());
    }
    
    // optional string ip_address = 6;
    if (has_ip_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->ip_address());
    }
    
    // optional string protocol = 7;
    if (has_protocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->protocol());
    }
    
  }
  // repeated uint32 port = 8;
  total_size += 1 * port_size();
  for (int i = 0; i < port_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormat::UInt32Size(
      this->port(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Command::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Command* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Command*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
  GOOGLE_CHECK_NE(&from, this);
  port_.MergeFrom(from.port_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_action(from.action());
    }
    if (from._has_bit(1)) {
      set_response(from.response());
    }
    if (from._has_bit(2)) {
      set_err_message(from.err_message());
    }
    if (from._has_bit(3)) {
      set_chain_name(from.chain_name());
    }
    if (from._has_bit(4)) {
      set_mac_address(from.mac_address());
    }
    if (from._has_bit(5)) {
      set_ip_address(from.ip_address());
    }
    if (from._has_bit(6)) {
      set_protocol(from.protocol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Command::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::Swap(Command* other) {
  if (other != this) {
    std::swap(action_, other->action_);
    std::swap(response_, other->response_);
    std::swap(err_message_, other->err_message_);
    std::swap(chain_name_, other->chain_name_);
    std::swap(mac_address_, other->mac_address_);
    std::swap(ip_address_, other->ip_address_);
    std::swap(protocol_, other->protocol_);
    port_.Swap(&other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool Command::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* Command::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* Command::GetReflection() const {
  if (Command_reflection_ == NULL) protobuf_BuildDesc_firewall_5fcommand_2eproto();
  return Command_reflection_;
}

}  // namespace Firewall
}  // namespace Message
}  // namespace HoneyClient
