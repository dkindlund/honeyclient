// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "message.pb.h"
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>

namespace HoneyClient {

namespace {

const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_Client_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_Client_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_File_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_File_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_File_Content_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_File_Content_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_Registry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_Registry_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_Process_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_Process_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_Fingerprint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_Fingerprint_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_Url_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_Url_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Message_Url_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Message_Job_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_Job_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_Firewall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_Firewall_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_Firewall_Command_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_Firewall_Command_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Message_Firewall_Command_ActionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Message_Firewall_Command_ResponseType_descriptor_ = NULL;

}  // namespace


void protobuf_BuildDesc_message_2eproto_AssignGlobalDescriptors(const ::google::protobuf::FileDescriptor* file) {
  Message_descriptor_ = file->message_type(0);
  Message::default_instance_ = new Message();
  static const int Message_offsets_[1] = {
  };
  Message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      sizeof(Message));
  Message_Client_descriptor_ = Message_descriptor_->nested_type(0);
  Message_Client::default_instance_ = new Message_Client();
  static const int Message_Client_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Client, vm_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Client, snapshot_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Client, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Client, start_at_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Client, compromise_at_),
  };
  Message_Client_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_Client_descriptor_,
      Message_Client::default_instance_,
      Message_Client_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Client, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Client, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      sizeof(Message_Client));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_Client_descriptor_, Message_Client::default_instance_);
  Message_File_descriptor_ = Message_descriptor_->nested_type(1);
  Message_File::default_instance_ = new Message_File();
  static const int Message_File_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_File, time_at_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_File, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_File, event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_File, content_),
  };
  Message_File_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_File_descriptor_,
      Message_File::default_instance_,
      Message_File_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_File, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_File, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      sizeof(Message_File));
  Message_File_Content_descriptor_ = Message_File_descriptor_->nested_type(0);
  Message_File_Content::default_instance_ = new Message_File_Content();
  static const int Message_File_Content_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_File_Content, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_File_Content, md5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_File_Content, sha1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_File_Content, mime_type_),
  };
  Message_File_Content_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_File_Content_descriptor_,
      Message_File_Content::default_instance_,
      Message_File_Content_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_File_Content, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_File_Content, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      sizeof(Message_File_Content));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_File_Content_descriptor_, Message_File_Content::default_instance_);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_File_descriptor_, Message_File::default_instance_);
  Message_Registry_descriptor_ = Message_descriptor_->nested_type(2);
  Message_Registry::default_instance_ = new Message_Registry();
  static const int Message_Registry_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Registry, time_at_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Registry, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Registry, event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Registry, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Registry, value_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Registry, value_type_),
  };
  Message_Registry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_Registry_descriptor_,
      Message_Registry::default_instance_,
      Message_Registry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Registry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Registry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      sizeof(Message_Registry));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_Registry_descriptor_, Message_Registry::default_instance_);
  Message_Process_descriptor_ = Message_descriptor_->nested_type(3);
  Message_Process::default_instance_ = new Message_Process();
  static const int Message_Process_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Process, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Process, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Process, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Process, registry_),
  };
  Message_Process_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_Process_descriptor_,
      Message_Process::default_instance_,
      Message_Process_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Process, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Process, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      sizeof(Message_Process));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_Process_descriptor_, Message_Process::default_instance_);
  Message_Fingerprint_descriptor_ = Message_descriptor_->nested_type(4);
  Message_Fingerprint::default_instance_ = new Message_Fingerprint();
  static const int Message_Fingerprint_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Fingerprint, process_),
  };
  Message_Fingerprint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_Fingerprint_descriptor_,
      Message_Fingerprint::default_instance_,
      Message_Fingerprint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Fingerprint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Fingerprint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      sizeof(Message_Fingerprint));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_Fingerprint_descriptor_, Message_Fingerprint::default_instance_);
  Message_Url_descriptor_ = Message_descriptor_->nested_type(5);
  Message_Url::default_instance_ = new Message_Url();
  static const int Message_Url_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Url, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Url, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Url, client_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Url, fingerprint_),
  };
  Message_Url_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_Url_descriptor_,
      Message_Url::default_instance_,
      Message_Url_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Url, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Url, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      sizeof(Message_Url));
  Message_Url_Status_descriptor_ = Message_Url_descriptor_->enum_type(0);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_Url_descriptor_, Message_Url::default_instance_);
  Message_Job_descriptor_ = Message_descriptor_->nested_type(6);
  Message_Job::default_instance_ = new Message_Job();
  static const int Message_Job_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Job, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Job, created_at_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Job, completed_at_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Job, total_num_urls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Job, url_),
  };
  Message_Job_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_Job_descriptor_,
      Message_Job::default_instance_,
      Message_Job_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Job, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Job, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      sizeof(Message_Job));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_Job_descriptor_, Message_Job::default_instance_);
  Message_Firewall_descriptor_ = Message_descriptor_->nested_type(7);
  Message_Firewall::default_instance_ = new Message_Firewall();
  static const int Message_Firewall_offsets_[1] = {
  };
  Message_Firewall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_Firewall_descriptor_,
      Message_Firewall::default_instance_,
      Message_Firewall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Firewall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Firewall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      sizeof(Message_Firewall));
  Message_Firewall_Command_descriptor_ = Message_Firewall_descriptor_->nested_type(0);
  Message_Firewall_Command::default_instance_ = new Message_Firewall_Command();
  static const int Message_Firewall_Command_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Firewall_Command, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Firewall_Command, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Firewall_Command, err_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Firewall_Command, chain_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Firewall_Command, mac_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Firewall_Command, ip_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Firewall_Command, protocol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Firewall_Command, port_),
  };
  Message_Firewall_Command_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_Firewall_Command_descriptor_,
      Message_Firewall_Command::default_instance_,
      Message_Firewall_Command_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Firewall_Command, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Firewall_Command, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      sizeof(Message_Firewall_Command));
  Message_Firewall_Command_ActionType_descriptor_ = Message_Firewall_Command_descriptor_->enum_type(0);
  Message_Firewall_Command_ResponseType_descriptor_ = Message_Firewall_Command_descriptor_->enum_type(1);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_Firewall_Command_descriptor_, Message_Firewall_Command::default_instance_);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_Firewall_descriptor_, Message_Firewall::default_instance_);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_descriptor_, Message::default_instance_);
  Message::default_instance_->InitAsDefaultInstance();
  Message_Client::default_instance_->InitAsDefaultInstance();
  Message_File::default_instance_->InitAsDefaultInstance();
  Message_File_Content::default_instance_->InitAsDefaultInstance();
  Message_Registry::default_instance_->InitAsDefaultInstance();
  Message_Process::default_instance_->InitAsDefaultInstance();
  Message_Fingerprint::default_instance_->InitAsDefaultInstance();
  Message_Url::default_instance_->InitAsDefaultInstance();
  Message_Job::default_instance_->InitAsDefaultInstance();
  Message_Firewall::default_instance_->InitAsDefaultInstance();
  Message_Firewall_Command::default_instance_->InitAsDefaultInstance();
}

void protobuf_BuildDesc_message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;
  ::google::protobuf::DescriptorPool* pool =
    ::google::protobuf::DescriptorPool::internal_generated_pool();

  pool->InternalBuildGeneratedFile(
    "\n\rmessage.proto\022\013HoneyClient\"\203\013\n\007Message"
    "\032i\n\006Client\022\017\n\007vm_name\030\001 \002(\t\022\025\n\rsnapshot_"
    "name\030\002 \002(\t\022\016\n\006status\030\003 \001(\t\022\020\n\010start_at\030\004"
    " \001(\t\022\025\n\rcompromise_at\030\005 \001(\t\032\257\001\n\004File\022\017\n\007"
    "time_at\030\001 \002(\t\022\014\n\004name\030\002 \002(\t\022\r\n\005event\030\003 \002"
    "(\t\0222\n\007content\030\004 \002(\0132!.HoneyClient.Messag"
    "e.File.Content\032E\n\007Content\022\014\n\004size\030\001 \002(\004\022"
    "\013\n\003md5\030\002 \002(\t\022\014\n\004sha1\030\003 \002(\t\022\021\n\tmime_type\030"
    "\004 \002(\t\032o\n\010Registry\022\017\n\007time_at\030\001 \002(\t\022\014\n\004na"
    "me\030\002 \002(\t\022\r\n\005event\030\003 \002(\t\022\r\n\005value\030\005 \001(\t\022\022"
    "\n\nvalue_name\030\006 \001(\t\022\022\n\nvalue_type\030\007 \001(\t\032~"
    "\n\007Process\022\014\n\004name\030\001 \002(\t\022\013\n\003pid\030\002 \002(\004\022\'\n\004"
    "file\030\003 \003(\0132\031.HoneyClient.Message.File\022/\n"
    "\010registry\030\004 \003(\0132\035.HoneyClient.Message.Re"
    "gistry\032<\n\013Fingerprint\022-\n\007process\030\001 \003(\0132\034"
    ".HoneyClient.Message.Process\032\224\002\n\003Url\022\014\n\004"
    "name\030\001 \002(\t\022<\n\006status\030\002 \002(\0162\037.HoneyClient"
    ".Message.Url.Status:\013NOT_VISITED\022+\n\006clie"
    "nt\030\003 \001(\0132\033.HoneyClient.Message.Client\0225\n"
    "\013fingerprint\030\004 \001(\0132 .HoneyClient.Message"
    ".Fingerprint\"]\n\006Status\022\017\n\013NOT_VISITED\020\001\022"
    "\013\n\007VISITED\020\002\022\013\n\007IGNORED\020\003\022\r\n\tTIMED_OUT\020\004"
    "\022\t\n\005ERROR\020\005\022\016\n\nSUSPICIOUS\020\006\032|\n\003Job\022\014\n\004uu"
    "id\030\001 \002(\t\022\022\n\ncreated_at\030\002 \001(\t\022\024\n\014complete"
    "d_at\030\003 \001(\t\022\026\n\016total_num_urls\030\004 \001(\004\022%\n\003ur"
    "l\030\005 \003(\0132\030.HoneyClient.Message.Url\032\226\003\n\010Fi"
    "rewall\032\211\003\n\007Command\022I\n\006action\030\001 \002(\01620.Hon"
    "eyClient.Message.Firewall.Command.Action"
    "Type:\007UNKNOWN\022K\n\010response\030\002 \001(\01622.HoneyC"
    "lient.Message.Firewall.Command.ResponseT"
    "ype:\005ERROR\022\023\n\013err_message\030\003 \001(\t\022\022\n\nchain"
    "_name\030\004 \001(\t\022\023\n\013mac_address\030\005 \001(\t\022\022\n\nip_a"
    "ddress\030\006 \001(\t\022\020\n\010protocol\030\007 \001(\t\022\014\n\004port\030\010"
    " \003(\r\"Q\n\nActionType\022\013\n\007UNKNOWN\020\001\022\014\n\010DENY_"
    "ALL\020\002\022\013\n\007DENY_VM\020\003\022\014\n\010ALLOW_VM\020\004\022\r\n\tALLO"
    "W_ALL\020\005\"!\n\014ResponseType\022\t\n\005ERROR\020\001\022\006\n\002OK"
    "\020\002B\033\n\027org.honeyclient.MessageH\001", 1471,
  &protobuf_BuildDesc_message_2eproto_AssignGlobalDescriptors);
}

// Force BuildDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_2eproto {
  StaticDescriptorInitializer_message_2eproto() {
    protobuf_BuildDesc_message_2eproto();
  }
} static_descriptor_initializer_message_2eproto_;


// ===================================================================

const ::std::string Message_Client::_default_vm_name_;
const ::std::string Message_Client::_default_snapshot_name_;
const ::std::string Message_Client::_default_status_;
const ::std::string Message_Client::_default_start_at_;
const ::std::string Message_Client::_default_compromise_at_;
Message_Client::Message_Client()
  : ::google::protobuf::Message(),
    _cached_size_(0),
    vm_name_(const_cast< ::std::string*>(&_default_vm_name_)),
    snapshot_name_(const_cast< ::std::string*>(&_default_snapshot_name_)),
    status_(const_cast< ::std::string*>(&_default_status_)),
    start_at_(const_cast< ::std::string*>(&_default_start_at_)),
    compromise_at_(const_cast< ::std::string*>(&_default_compromise_at_)) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

void Message_Client::InitAsDefaultInstance() {}

Message_Client::Message_Client(const Message_Client& from)
  : ::google::protobuf::Message(),
    _cached_size_(0),
    vm_name_(const_cast< ::std::string*>(&_default_vm_name_)),
    snapshot_name_(const_cast< ::std::string*>(&_default_snapshot_name_)),
    status_(const_cast< ::std::string*>(&_default_status_)),
    start_at_(const_cast< ::std::string*>(&_default_start_at_)),
    compromise_at_(const_cast< ::std::string*>(&_default_compromise_at_)) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

Message_Client::~Message_Client() {
  if (vm_name_ != &_default_vm_name_) {
    delete vm_name_;
  }
  if (snapshot_name_ != &_default_snapshot_name_) {
    delete snapshot_name_;
  }
  if (status_ != &_default_status_) {
    delete status_;
  }
  if (start_at_ != &_default_start_at_) {
    delete start_at_;
  }
  if (compromise_at_ != &_default_compromise_at_) {
    delete compromise_at_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Message_Client::descriptor() {
  if (Message_Client_descriptor_ == NULL) protobuf_BuildDesc_message_2eproto();
  return Message_Client_descriptor_;
}

const Message_Client& Message_Client::default_instance() {
  if (default_instance_ == NULL) protobuf_BuildDesc_message_2eproto();
  return *default_instance_;
}

Message_Client* Message_Client::default_instance_ = NULL;

Message_Client* Message_Client::New() const {
  return new Message_Client;
}

void Message_Client::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (vm_name_ != &_default_vm_name_) {
        vm_name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (snapshot_name_ != &_default_snapshot_name_) {
        snapshot_name_->clear();
      }
    }
    if (_has_bit(2)) {
      if (status_ != &_default_status_) {
        status_->clear();
      }
    }
    if (_has_bit(3)) {
      if (start_at_ != &_default_start_at_) {
        start_at_->clear();
      }
    }
    if (_has_bit(4)) {
      if (compromise_at_ != &_default_compromise_at_) {
        compromise_at_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message_Client::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required string vm_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_vm_name()));
        if (input->ExpectTag(18)) goto parse_snapshot_name;
        break;
      }
      
      // required string snapshot_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_snapshot_name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_snapshot_name()));
        if (input->ExpectTag(26)) goto parse_status;
        break;
      }
      
      // optional string status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_status:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_status()));
        if (input->ExpectTag(34)) goto parse_start_at;
        break;
      }
      
      // optional string start_at = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_start_at:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_start_at()));
        if (input->ExpectTag(42)) goto parse_compromise_at;
        break;
      }
      
      // optional string compromise_at = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_compromise_at:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_compromise_at()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

bool Message_Client::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  // required string vm_name = 1;
  if (_has_bit(0)) {
    DO_(::google::protobuf::internal::WireFormat::WriteString(1, this->vm_name(), output));
  }
  
  // required string snapshot_name = 2;
  if (_has_bit(1)) {
    DO_(::google::protobuf::internal::WireFormat::WriteString(2, this->snapshot_name(), output));
  }
  
  // optional string status = 3;
  if (_has_bit(2)) {
    DO_(::google::protobuf::internal::WireFormat::WriteString(3, this->status(), output));
  }
  
  // optional string start_at = 4;
  if (_has_bit(3)) {
    DO_(::google::protobuf::internal::WireFormat::WriteString(4, this->start_at(), output));
  }
  
  // optional string compromise_at = 5;
  if (_has_bit(4)) {
    DO_(::google::protobuf::internal::WireFormat::WriteString(5, this->compromise_at(), output));
  }
  
  if (!unknown_fields().empty()) {
    DO_(::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output));
  }
  return true;
#undef DO_
}

int Message_Client::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string vm_name = 1;
    if (has_vm_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->vm_name());
    }
    
    // required string snapshot_name = 2;
    if (has_snapshot_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->snapshot_name());
    }
    
    // optional string status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->status());
    }
    
    // optional string start_at = 4;
    if (has_start_at()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->start_at());
    }
    
    // optional string compromise_at = 5;
    if (has_compromise_at()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->compromise_at());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Message_Client::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message_Client* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message_Client*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message_Client::MergeFrom(const Message_Client& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_vm_name(from.vm_name());
    }
    if (from._has_bit(1)) {
      set_snapshot_name(from.snapshot_name());
    }
    if (from._has_bit(2)) {
      set_status(from.status());
    }
    if (from._has_bit(3)) {
      set_start_at(from.start_at());
    }
    if (from._has_bit(4)) {
      set_compromise_at(from.compromise_at());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message_Client::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_Client::CopyFrom(const Message_Client& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_Client::Swap(Message_Client* other) {
  if (other != this) {
    std::swap(vm_name_, other->vm_name_);
    std::swap(snapshot_name_, other->snapshot_name_);
    std::swap(status_, other->status_);
    std::swap(start_at_, other->start_at_);
    std::swap(compromise_at_, other->compromise_at_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool Message_Client::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* Message_Client::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* Message_Client::GetReflection() const {
  if (Message_Client_reflection_ == NULL) protobuf_BuildDesc_message_2eproto();
  return Message_Client_reflection_;
}

// -------------------------------------------------------------------


const ::std::string Message_File_Content::_default_md5_;
const ::std::string Message_File_Content::_default_sha1_;
const ::std::string Message_File_Content::_default_mime_type_;
Message_File_Content::Message_File_Content()
  : ::google::protobuf::Message(),
    _cached_size_(0),
    size_(GOOGLE_ULONGLONG(0)),
    md5_(const_cast< ::std::string*>(&_default_md5_)),
    sha1_(const_cast< ::std::string*>(&_default_sha1_)),
    mime_type_(const_cast< ::std::string*>(&_default_mime_type_)) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

void Message_File_Content::InitAsDefaultInstance() {}

Message_File_Content::Message_File_Content(const Message_File_Content& from)
  : ::google::protobuf::Message(),
    _cached_size_(0),
    size_(GOOGLE_ULONGLONG(0)),
    md5_(const_cast< ::std::string*>(&_default_md5_)),
    sha1_(const_cast< ::std::string*>(&_default_sha1_)),
    mime_type_(const_cast< ::std::string*>(&_default_mime_type_)) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

Message_File_Content::~Message_File_Content() {
  if (md5_ != &_default_md5_) {
    delete md5_;
  }
  if (sha1_ != &_default_sha1_) {
    delete sha1_;
  }
  if (mime_type_ != &_default_mime_type_) {
    delete mime_type_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Message_File_Content::descriptor() {
  if (Message_File_Content_descriptor_ == NULL) protobuf_BuildDesc_message_2eproto();
  return Message_File_Content_descriptor_;
}

const Message_File_Content& Message_File_Content::default_instance() {
  if (default_instance_ == NULL) protobuf_BuildDesc_message_2eproto();
  return *default_instance_;
}

Message_File_Content* Message_File_Content::default_instance_ = NULL;

Message_File_Content* Message_File_Content::New() const {
  return new Message_File_Content;
}

void Message_File_Content::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    size_ = GOOGLE_ULONGLONG(0);
    if (_has_bit(1)) {
      if (md5_ != &_default_md5_) {
        md5_->clear();
      }
    }
    if (_has_bit(2)) {
      if (sha1_ != &_default_sha1_) {
        sha1_->clear();
      }
    }
    if (_has_bit(3)) {
      if (mime_type_ != &_default_mime_type_) {
        mime_type_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message_File_Content::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required uint64 size = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &size_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_md5;
        break;
      }
      
      // required string md5 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_md5:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_md5()));
        if (input->ExpectTag(26)) goto parse_sha1;
        break;
      }
      
      // required string sha1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sha1:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_sha1()));
        if (input->ExpectTag(34)) goto parse_mime_type;
        break;
      }
      
      // required string mime_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_mime_type:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_mime_type()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

bool Message_File_Content::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  // required uint64 size = 1;
  if (_has_bit(0)) {
    DO_(::google::protobuf::internal::WireFormat::WriteUInt64(1, this->size(), output));
  }
  
  // required string md5 = 2;
  if (_has_bit(1)) {
    DO_(::google::protobuf::internal::WireFormat::WriteString(2, this->md5(), output));
  }
  
  // required string sha1 = 3;
  if (_has_bit(2)) {
    DO_(::google::protobuf::internal::WireFormat::WriteString(3, this->sha1(), output));
  }
  
  // required string mime_type = 4;
  if (_has_bit(3)) {
    DO_(::google::protobuf::internal::WireFormat::WriteString(4, this->mime_type(), output));
  }
  
  if (!unknown_fields().empty()) {
    DO_(::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output));
  }
  return true;
#undef DO_
}

int Message_File_Content::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 size = 1;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->size());
    }
    
    // required string md5 = 2;
    if (has_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->md5());
    }
    
    // required string sha1 = 3;
    if (has_sha1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->sha1());
    }
    
    // required string mime_type = 4;
    if (has_mime_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->mime_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Message_File_Content::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message_File_Content* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message_File_Content*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message_File_Content::MergeFrom(const Message_File_Content& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_size(from.size());
    }
    if (from._has_bit(1)) {
      set_md5(from.md5());
    }
    if (from._has_bit(2)) {
      set_sha1(from.sha1());
    }
    if (from._has_bit(3)) {
      set_mime_type(from.mime_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message_File_Content::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_File_Content::CopyFrom(const Message_File_Content& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_File_Content::Swap(Message_File_Content* other) {
  if (other != this) {
    std::swap(size_, other->size_);
    std::swap(md5_, other->md5_);
    std::swap(sha1_, other->sha1_);
    std::swap(mime_type_, other->mime_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool Message_File_Content::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* Message_File_Content::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* Message_File_Content::GetReflection() const {
  if (Message_File_Content_reflection_ == NULL) protobuf_BuildDesc_message_2eproto();
  return Message_File_Content_reflection_;
}

// -------------------------------------------------------------------

const ::std::string Message_File::_default_time_at_;
const ::std::string Message_File::_default_name_;
const ::std::string Message_File::_default_event_;

Message_File::Message_File()
  : ::google::protobuf::Message(),
    _cached_size_(0),
    time_at_(const_cast< ::std::string*>(&_default_time_at_)),
    name_(const_cast< ::std::string*>(&_default_name_)),
    event_(const_cast< ::std::string*>(&_default_event_)),
    content_(NULL) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

void Message_File::InitAsDefaultInstance() {  content_ = const_cast< ::HoneyClient::Message_File_Content*>(&::HoneyClient::Message_File_Content::default_instance());
}

Message_File::Message_File(const Message_File& from)
  : ::google::protobuf::Message(),
    _cached_size_(0),
    time_at_(const_cast< ::std::string*>(&_default_time_at_)),
    name_(const_cast< ::std::string*>(&_default_name_)),
    event_(const_cast< ::std::string*>(&_default_event_)),
    content_(NULL) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

Message_File::~Message_File() {
  if (time_at_ != &_default_time_at_) {
    delete time_at_;
  }
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (event_ != &_default_event_) {
    delete event_;
  }
  if (this != default_instance_) {
    delete content_;
  }
}

const ::google::protobuf::Descriptor* Message_File::descriptor() {
  if (Message_File_descriptor_ == NULL) protobuf_BuildDesc_message_2eproto();
  return Message_File_descriptor_;
}

const Message_File& Message_File::default_instance() {
  if (default_instance_ == NULL) protobuf_BuildDesc_message_2eproto();
  return *default_instance_;
}

Message_File* Message_File::default_instance_ = NULL;

Message_File* Message_File::New() const {
  return new Message_File;
}

void Message_File::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (time_at_ != &_default_time_at_) {
        time_at_->clear();
      }
    }
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(2)) {
      if (event_ != &_default_event_) {
        event_->clear();
      }
    }
    if (_has_bit(3)) {
      if (content_ != NULL) content_->::HoneyClient::Message_File_Content::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message_File::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required string time_at = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_time_at()));
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(26)) goto parse_event;
        break;
      }
      
      // required string event = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_event:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_event()));
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }
      
      // required .HoneyClient.Message.File.Content content = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_content:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_content()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

bool Message_File::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  // required string time_at = 1;
  if (_has_bit(0)) {
    DO_(::google::protobuf::internal::WireFormat::WriteString(1, this->time_at(), output));
  }
  
  // required string name = 2;
  if (_has_bit(1)) {
    DO_(::google::protobuf::internal::WireFormat::WriteString(2, this->name(), output));
  }
  
  // required string event = 3;
  if (_has_bit(2)) {
    DO_(::google::protobuf::internal::WireFormat::WriteString(3, this->event(), output));
  }
  
  // required .HoneyClient.Message.File.Content content = 4;
  if (_has_bit(3)) {
    DO_(::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(4, this->content(), output));
  }
  
  if (!unknown_fields().empty()) {
    DO_(::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output));
  }
  return true;
#undef DO_
}

int Message_File::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string time_at = 1;
    if (has_time_at()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->time_at());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // required string event = 3;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->event());
    }
    
    // required .HoneyClient.Message.File.Content content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->content());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Message_File::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message_File* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message_File*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message_File::MergeFrom(const Message_File& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_time_at(from.time_at());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      set_event(from.event());
    }
    if (from._has_bit(3)) {
      mutable_content()->::HoneyClient::Message_File_Content::MergeFrom(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message_File::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_File::CopyFrom(const Message_File& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_File::Swap(Message_File* other) {
  if (other != this) {
    std::swap(time_at_, other->time_at_);
    std::swap(name_, other->name_);
    std::swap(event_, other->event_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool Message_File::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_content()) {
    if (!this->content().IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* Message_File::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* Message_File::GetReflection() const {
  if (Message_File_reflection_ == NULL) protobuf_BuildDesc_message_2eproto();
  return Message_File_reflection_;
}

// -------------------------------------------------------------------

const ::std::string Message_Registry::_default_time_at_;
const ::std::string Message_Registry::_default_name_;
const ::std::string Message_Registry::_default_event_;
const ::std::string Message_Registry::_default_value_;
const ::std::string Message_Registry::_default_value_name_;
const ::std::string Message_Registry::_default_value_type_;
Message_Registry::Message_Registry()
  : ::google::protobuf::Message(),
    _cached_size_(0),
    time_at_(const_cast< ::std::string*>(&_default_time_at_)),
    name_(const_cast< ::std::string*>(&_default_name_)),
    event_(const_cast< ::std::string*>(&_default_event_)),
    value_(const_cast< ::std::string*>(&_default_value_)),
    value_name_(const_cast< ::std::string*>(&_default_value_name_)),
    value_type_(const_cast< ::std::string*>(&_default_value_type_)) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

void Message_Registry::InitAsDefaultInstance() {}

Message_Registry::Message_Registry(const Message_Registry& from)
  : ::google::protobuf::Message(),
    _cached_size_(0),
    time_at_(const_cast< ::std::string*>(&_default_time_at_)),
    name_(const_cast< ::std::string*>(&_default_name_)),
    event_(const_cast< ::std::string*>(&_default_event_)),
    value_(const_cast< ::std::string*>(&_default_value_)),
    value_name_(const_cast< ::std::string*>(&_default_value_name_)),
    value_type_(const_cast< ::std::string*>(&_default_value_type_)) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

Message_Registry::~Message_Registry() {
  if (time_at_ != &_default_time_at_) {
    delete time_at_;
  }
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (event_ != &_default_event_) {
    delete event_;
  }
  if (value_ != &_default_value_) {
    delete value_;
  }
  if (value_name_ != &_default_value_name_) {
    delete value_name_;
  }
  if (value_type_ != &_default_value_type_) {
    delete value_type_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Message_Registry::descriptor() {
  if (Message_Registry_descriptor_ == NULL) protobuf_BuildDesc_message_2eproto();
  return Message_Registry_descriptor_;
}

const Message_Registry& Message_Registry::default_instance() {
  if (default_instance_ == NULL) protobuf_BuildDesc_message_2eproto();
  return *default_instance_;
}

Message_Registry* Message_Registry::default_instance_ = NULL;

Message_Registry* Message_Registry::New() const {
  return new Message_Registry;
}

void Message_Registry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (time_at_ != &_default_time_at_) {
        time_at_->clear();
      }
    }
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(2)) {
      if (event_ != &_default_event_) {
        event_->clear();
      }
    }
    if (_has_bit(3)) {
      if (value_ != &_default_value_) {
        value_->clear();
      }
    }
    if (_has_bit(4)) {
      if (value_name_ != &_default_value_name_) {
        value_name_->clear();
      }
    }
    if (_has_bit(5)) {
      if (value_type_ != &_default_value_type_) {
        value_type_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message_Registry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required string time_at = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_time_at()));
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(26)) goto parse_event;
        break;
      }
      
      // required string event = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_event:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_event()));
        if (input->ExpectTag(42)) goto parse_value;
        break;
      }
      
      // optional string value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_value:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_value()));
        if (input->ExpectTag(50)) goto parse_value_name;
        break;
      }
      
      // optional string value_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_value_name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_value_name()));
        if (input->ExpectTag(58)) goto parse_value_type;
        break;
      }
      
      // optional string value_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_value_type:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_value_type()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

bool Message_Registry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  // required string time_at = 1;
  if (_has_bit(0)) {
    DO_(::google::protobuf::internal::WireFormat::WriteString(1, this->time_at(), output));
  }
  
  // required string name = 2;
  if (_has_bit(1)) {
    DO_(::google::protobuf::internal::WireFormat::WriteString(2, this->name(), output));
  }
  
  // required string event = 3;
  if (_has_bit(2)) {
    DO_(::google::protobuf::internal::WireFormat::WriteString(3, this->event(), output));
  }
  
  // optional string value = 5;
  if (_has_bit(3)) {
    DO_(::google::protobuf::internal::WireFormat::WriteString(5, this->value(), output));
  }
  
  // optional string value_name = 6;
  if (_has_bit(4)) {
    DO_(::google::protobuf::internal::WireFormat::WriteString(6, this->value_name(), output));
  }
  
  // optional string value_type = 7;
  if (_has_bit(5)) {
    DO_(::google::protobuf::internal::WireFormat::WriteString(7, this->value_type(), output));
  }
  
  if (!unknown_fields().empty()) {
    DO_(::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output));
  }
  return true;
#undef DO_
}

int Message_Registry::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string time_at = 1;
    if (has_time_at()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->time_at());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // required string event = 3;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->event());
    }
    
    // optional string value = 5;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->value());
    }
    
    // optional string value_name = 6;
    if (has_value_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->value_name());
    }
    
    // optional string value_type = 7;
    if (has_value_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->value_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Message_Registry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message_Registry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message_Registry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message_Registry::MergeFrom(const Message_Registry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_time_at(from.time_at());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      set_event(from.event());
    }
    if (from._has_bit(3)) {
      set_value(from.value());
    }
    if (from._has_bit(4)) {
      set_value_name(from.value_name());
    }
    if (from._has_bit(5)) {
      set_value_type(from.value_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message_Registry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_Registry::CopyFrom(const Message_Registry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_Registry::Swap(Message_Registry* other) {
  if (other != this) {
    std::swap(time_at_, other->time_at_);
    std::swap(name_, other->name_);
    std::swap(event_, other->event_);
    std::swap(value_, other->value_);
    std::swap(value_name_, other->value_name_);
    std::swap(value_type_, other->value_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool Message_Registry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* Message_Registry::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* Message_Registry::GetReflection() const {
  if (Message_Registry_reflection_ == NULL) protobuf_BuildDesc_message_2eproto();
  return Message_Registry_reflection_;
}

// -------------------------------------------------------------------

const ::std::string Message_Process::_default_name_;



Message_Process::Message_Process()
  : ::google::protobuf::Message(),
    _cached_size_(0),
    name_(const_cast< ::std::string*>(&_default_name_)),
    pid_(GOOGLE_ULONGLONG(0)) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

void Message_Process::InitAsDefaultInstance() {}

Message_Process::Message_Process(const Message_Process& from)
  : ::google::protobuf::Message(),
    _cached_size_(0),
    name_(const_cast< ::std::string*>(&_default_name_)),
    pid_(GOOGLE_ULONGLONG(0)) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

Message_Process::~Message_Process() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Message_Process::descriptor() {
  if (Message_Process_descriptor_ == NULL) protobuf_BuildDesc_message_2eproto();
  return Message_Process_descriptor_;
}

const Message_Process& Message_Process::default_instance() {
  if (default_instance_ == NULL) protobuf_BuildDesc_message_2eproto();
  return *default_instance_;
}

Message_Process* Message_Process::default_instance_ = NULL;

Message_Process* Message_Process::New() const {
  return new Message_Process;
}

void Message_Process::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    pid_ = GOOGLE_ULONGLONG(0);
  }
  file_.Clear();
  registry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message_Process::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(16)) goto parse_pid;
        break;
      }
      
      // required uint64 pid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_pid:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &pid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_file;
        break;
      }
      
      // repeated .HoneyClient.Message.File file = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_file:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_file()));
        if (input->ExpectTag(26)) goto parse_file;
        if (input->ExpectTag(34)) goto parse_registry;
        break;
      }
      
      // repeated .HoneyClient.Message.Registry registry = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_registry:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_registry()));
        if (input->ExpectTag(34)) goto parse_registry;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

bool Message_Process::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  // required string name = 1;
  if (_has_bit(0)) {
    DO_(::google::protobuf::internal::WireFormat::WriteString(1, this->name(), output));
  }
  
  // required uint64 pid = 2;
  if (_has_bit(1)) {
    DO_(::google::protobuf::internal::WireFormat::WriteUInt64(2, this->pid(), output));
  }
  
  // repeated .HoneyClient.Message.File file = 3;
  for (int i = 0; i < file_.size(); i++) {
    DO_(::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->file(i), output));
  }
  
  // repeated .HoneyClient.Message.Registry registry = 4;
  for (int i = 0; i < registry_.size(); i++) {
    DO_(::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(4, this->registry(i), output));
  }
  
  if (!unknown_fields().empty()) {
    DO_(::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output));
  }
  return true;
#undef DO_
}

int Message_Process::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // required uint64 pid = 2;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->pid());
    }
    
  }
  // repeated .HoneyClient.Message.File file = 3;
  total_size += 1 * file_size();
  for (int i = 0; i < file_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->file(i));
  }
  
  // repeated .HoneyClient.Message.Registry registry = 4;
  total_size += 1 * registry_size();
  for (int i = 0; i < registry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->registry(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Message_Process::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message_Process* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message_Process*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message_Process::MergeFrom(const Message_Process& from) {
  GOOGLE_CHECK_NE(&from, this);
  file_.MergeFrom(from.file_);
  registry_.MergeFrom(from.registry_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      set_pid(from.pid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message_Process::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_Process::CopyFrom(const Message_Process& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_Process::Swap(Message_Process* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(pid_, other->pid_);
    file_.Swap(&other->file_);
    registry_.Swap(&other->registry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool Message_Process::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < file_size(); i++) {
    if (!this->file(i).IsInitialized()) return false;
  }
  for (int i = 0; i < registry_size(); i++) {
    if (!this->registry(i).IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* Message_Process::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* Message_Process::GetReflection() const {
  if (Message_Process_reflection_ == NULL) protobuf_BuildDesc_message_2eproto();
  return Message_Process_reflection_;
}

// -------------------------------------------------------------------


Message_Fingerprint::Message_Fingerprint()
  : ::google::protobuf::Message(),
    _cached_size_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

void Message_Fingerprint::InitAsDefaultInstance() {}

Message_Fingerprint::Message_Fingerprint(const Message_Fingerprint& from)
  : ::google::protobuf::Message(),
    _cached_size_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

Message_Fingerprint::~Message_Fingerprint() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Message_Fingerprint::descriptor() {
  if (Message_Fingerprint_descriptor_ == NULL) protobuf_BuildDesc_message_2eproto();
  return Message_Fingerprint_descriptor_;
}

const Message_Fingerprint& Message_Fingerprint::default_instance() {
  if (default_instance_ == NULL) protobuf_BuildDesc_message_2eproto();
  return *default_instance_;
}

Message_Fingerprint* Message_Fingerprint::default_instance_ = NULL;

Message_Fingerprint* Message_Fingerprint::New() const {
  return new Message_Fingerprint;
}

void Message_Fingerprint::Clear() {
  process_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message_Fingerprint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .HoneyClient.Message.Process process = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_process:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_process()));
        if (input->ExpectTag(10)) goto parse_process;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

bool Message_Fingerprint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  // repeated .HoneyClient.Message.Process process = 1;
  for (int i = 0; i < process_.size(); i++) {
    DO_(::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->process(i), output));
  }
  
  if (!unknown_fields().empty()) {
    DO_(::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output));
  }
  return true;
#undef DO_
}

int Message_Fingerprint::ByteSize() const {
  int total_size = 0;
  
  // repeated .HoneyClient.Message.Process process = 1;
  total_size += 1 * process_size();
  for (int i = 0; i < process_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->process(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Message_Fingerprint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message_Fingerprint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message_Fingerprint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message_Fingerprint::MergeFrom(const Message_Fingerprint& from) {
  GOOGLE_CHECK_NE(&from, this);
  process_.MergeFrom(from.process_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message_Fingerprint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_Fingerprint::CopyFrom(const Message_Fingerprint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_Fingerprint::Swap(Message_Fingerprint* other) {
  if (other != this) {
    process_.Swap(&other->process_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool Message_Fingerprint::IsInitialized() const {
  
  for (int i = 0; i < process_size(); i++) {
    if (!this->process(i).IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* Message_Fingerprint::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* Message_Fingerprint::GetReflection() const {
  if (Message_Fingerprint_reflection_ == NULL) protobuf_BuildDesc_message_2eproto();
  return Message_Fingerprint_reflection_;
}

// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Message_Url_Status_descriptor() {
  if (Message_Url_Status_descriptor_ == NULL) protobuf_BuildDesc_message_2eproto();
  return Message_Url_Status_descriptor_;
}
bool Message_Url_Status_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Message_Url_Status Message_Url::NOT_VISITED;
const Message_Url_Status Message_Url::VISITED;
const Message_Url_Status Message_Url::IGNORED;
const Message_Url_Status Message_Url::TIMED_OUT;
const Message_Url_Status Message_Url::ERROR;
const Message_Url_Status Message_Url::SUSPICIOUS;
const Message_Url_Status Message_Url::Status_MIN;
const Message_Url_Status Message_Url::Status_MAX;
#endif  // _MSC_VER
const ::std::string Message_Url::_default_name_;



Message_Url::Message_Url()
  : ::google::protobuf::Message(),
    _cached_size_(0),
    name_(const_cast< ::std::string*>(&_default_name_)),
    status_(1),
    client_(NULL),
    fingerprint_(NULL) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

void Message_Url::InitAsDefaultInstance() {  client_ = const_cast< ::HoneyClient::Message_Client*>(&::HoneyClient::Message_Client::default_instance());
  fingerprint_ = const_cast< ::HoneyClient::Message_Fingerprint*>(&::HoneyClient::Message_Fingerprint::default_instance());
}

Message_Url::Message_Url(const Message_Url& from)
  : ::google::protobuf::Message(),
    _cached_size_(0),
    name_(const_cast< ::std::string*>(&_default_name_)),
    status_(1),
    client_(NULL),
    fingerprint_(NULL) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

Message_Url::~Message_Url() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
    delete client_;
    delete fingerprint_;
  }
}

const ::google::protobuf::Descriptor* Message_Url::descriptor() {
  if (Message_Url_descriptor_ == NULL) protobuf_BuildDesc_message_2eproto();
  return Message_Url_descriptor_;
}

const Message_Url& Message_Url::default_instance() {
  if (default_instance_ == NULL) protobuf_BuildDesc_message_2eproto();
  return *default_instance_;
}

Message_Url* Message_Url::default_instance_ = NULL;

Message_Url* Message_Url::New() const {
  return new Message_Url;
}

void Message_Url::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    status_ = 1;
    if (_has_bit(2)) {
      if (client_ != NULL) client_->::HoneyClient::Message_Client::Clear();
    }
    if (_has_bit(3)) {
      if (fingerprint_ != NULL) fingerprint_->::HoneyClient::Message_Fingerprint::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message_Url::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }
      
      // required .HoneyClient.Message.Url.Status status = 2 [default = NOT_VISITED];
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_status:
        int value;
        DO_(::google::protobuf::internal::WireFormat::ReadEnum(input, &value));
        if (::HoneyClient::Message_Url_Status_IsValid(value)) {
          set_status(static_cast< ::HoneyClient::Message_Url_Status >(value));
        } else {
          mutable_unknown_fields()->AddField(2)->add_varint(value);
        }
        if (input->ExpectTag(26)) goto parse_client;
        break;
      }
      
      // optional .HoneyClient.Message.Client client = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_client:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_client()));
        if (input->ExpectTag(34)) goto parse_fingerprint;
        break;
      }
      
      // optional .HoneyClient.Message.Fingerprint fingerprint = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_fingerprint:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_fingerprint()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

bool Message_Url::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  // required string name = 1;
  if (_has_bit(0)) {
    DO_(::google::protobuf::internal::WireFormat::WriteString(1, this->name(), output));
  }
  
  // required .HoneyClient.Message.Url.Status status = 2 [default = NOT_VISITED];
  if (_has_bit(1)) {
    DO_(::google::protobuf::internal::WireFormat::WriteEnum(2, this->status(), output));
  }
  
  // optional .HoneyClient.Message.Client client = 3;
  if (_has_bit(2)) {
    DO_(::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->client(), output));
  }
  
  // optional .HoneyClient.Message.Fingerprint fingerprint = 4;
  if (_has_bit(3)) {
    DO_(::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(4, this->fingerprint(), output));
  }
  
  if (!unknown_fields().empty()) {
    DO_(::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output));
  }
  return true;
#undef DO_
}

int Message_Url::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // required .HoneyClient.Message.Url.Status status = 2 [default = NOT_VISITED];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::EnumSize(this->status());
    }
    
    // optional .HoneyClient.Message.Client client = 3;
    if (has_client()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->client());
    }
    
    // optional .HoneyClient.Message.Fingerprint fingerprint = 4;
    if (has_fingerprint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->fingerprint());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Message_Url::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message_Url* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message_Url*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message_Url::MergeFrom(const Message_Url& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      set_status(from.status());
    }
    if (from._has_bit(2)) {
      mutable_client()->::HoneyClient::Message_Client::MergeFrom(from.client());
    }
    if (from._has_bit(3)) {
      mutable_fingerprint()->::HoneyClient::Message_Fingerprint::MergeFrom(from.fingerprint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message_Url::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_Url::CopyFrom(const Message_Url& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_Url::Swap(Message_Url* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(status_, other->status_);
    std::swap(client_, other->client_);
    std::swap(fingerprint_, other->fingerprint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool Message_Url::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_client()) {
    if (!this->client().IsInitialized()) return false;
  }
  if (has_fingerprint()) {
    if (!this->fingerprint().IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* Message_Url::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* Message_Url::GetReflection() const {
  if (Message_Url_reflection_ == NULL) protobuf_BuildDesc_message_2eproto();
  return Message_Url_reflection_;
}

// -------------------------------------------------------------------

const ::std::string Message_Job::_default_uuid_;
const ::std::string Message_Job::_default_created_at_;
const ::std::string Message_Job::_default_completed_at_;


Message_Job::Message_Job()
  : ::google::protobuf::Message(),
    _cached_size_(0),
    uuid_(const_cast< ::std::string*>(&_default_uuid_)),
    created_at_(const_cast< ::std::string*>(&_default_created_at_)),
    completed_at_(const_cast< ::std::string*>(&_default_completed_at_)),
    total_num_urls_(GOOGLE_ULONGLONG(0)) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

void Message_Job::InitAsDefaultInstance() {}

Message_Job::Message_Job(const Message_Job& from)
  : ::google::protobuf::Message(),
    _cached_size_(0),
    uuid_(const_cast< ::std::string*>(&_default_uuid_)),
    created_at_(const_cast< ::std::string*>(&_default_created_at_)),
    completed_at_(const_cast< ::std::string*>(&_default_completed_at_)),
    total_num_urls_(GOOGLE_ULONGLONG(0)) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

Message_Job::~Message_Job() {
  if (uuid_ != &_default_uuid_) {
    delete uuid_;
  }
  if (created_at_ != &_default_created_at_) {
    delete created_at_;
  }
  if (completed_at_ != &_default_completed_at_) {
    delete completed_at_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Message_Job::descriptor() {
  if (Message_Job_descriptor_ == NULL) protobuf_BuildDesc_message_2eproto();
  return Message_Job_descriptor_;
}

const Message_Job& Message_Job::default_instance() {
  if (default_instance_ == NULL) protobuf_BuildDesc_message_2eproto();
  return *default_instance_;
}

Message_Job* Message_Job::default_instance_ = NULL;

Message_Job* Message_Job::New() const {
  return new Message_Job;
}

void Message_Job::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (uuid_ != &_default_uuid_) {
        uuid_->clear();
      }
    }
    if (_has_bit(1)) {
      if (created_at_ != &_default_created_at_) {
        created_at_->clear();
      }
    }
    if (_has_bit(2)) {
      if (completed_at_ != &_default_completed_at_) {
        completed_at_->clear();
      }
    }
    total_num_urls_ = GOOGLE_ULONGLONG(0);
  }
  url_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message_Job::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required string uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_uuid()));
        if (input->ExpectTag(18)) goto parse_created_at;
        break;
      }
      
      // optional string created_at = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_created_at:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_created_at()));
        if (input->ExpectTag(26)) goto parse_completed_at;
        break;
      }
      
      // optional string completed_at = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_completed_at:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_completed_at()));
        if (input->ExpectTag(32)) goto parse_total_num_urls;
        break;
      }
      
      // optional uint64 total_num_urls = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_total_num_urls:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &total_num_urls_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_url;
        break;
      }
      
      // repeated .HoneyClient.Message.Url url = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_url:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_url()));
        if (input->ExpectTag(42)) goto parse_url;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

bool Message_Job::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  // required string uuid = 1;
  if (_has_bit(0)) {
    DO_(::google::protobuf::internal::WireFormat::WriteString(1, this->uuid(), output));
  }
  
  // optional string created_at = 2;
  if (_has_bit(1)) {
    DO_(::google::protobuf::internal::WireFormat::WriteString(2, this->created_at(), output));
  }
  
  // optional string completed_at = 3;
  if (_has_bit(2)) {
    DO_(::google::protobuf::internal::WireFormat::WriteString(3, this->completed_at(), output));
  }
  
  // optional uint64 total_num_urls = 4;
  if (_has_bit(3)) {
    DO_(::google::protobuf::internal::WireFormat::WriteUInt64(4, this->total_num_urls(), output));
  }
  
  // repeated .HoneyClient.Message.Url url = 5;
  for (int i = 0; i < url_.size(); i++) {
    DO_(::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(5, this->url(i), output));
  }
  
  if (!unknown_fields().empty()) {
    DO_(::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output));
  }
  return true;
#undef DO_
}

int Message_Job::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->uuid());
    }
    
    // optional string created_at = 2;
    if (has_created_at()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->created_at());
    }
    
    // optional string completed_at = 3;
    if (has_completed_at()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->completed_at());
    }
    
    // optional uint64 total_num_urls = 4;
    if (has_total_num_urls()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->total_num_urls());
    }
    
  }
  // repeated .HoneyClient.Message.Url url = 5;
  total_size += 1 * url_size();
  for (int i = 0; i < url_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->url(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Message_Job::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message_Job* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message_Job*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message_Job::MergeFrom(const Message_Job& from) {
  GOOGLE_CHECK_NE(&from, this);
  url_.MergeFrom(from.url_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_uuid(from.uuid());
    }
    if (from._has_bit(1)) {
      set_created_at(from.created_at());
    }
    if (from._has_bit(2)) {
      set_completed_at(from.completed_at());
    }
    if (from._has_bit(3)) {
      set_total_num_urls(from.total_num_urls());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message_Job::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_Job::CopyFrom(const Message_Job& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_Job::Swap(Message_Job* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(created_at_, other->created_at_);
    std::swap(completed_at_, other->completed_at_);
    std::swap(total_num_urls_, other->total_num_urls_);
    url_.Swap(&other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool Message_Job::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < url_size(); i++) {
    if (!this->url(i).IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* Message_Job::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* Message_Job::GetReflection() const {
  if (Message_Job_reflection_ == NULL) protobuf_BuildDesc_message_2eproto();
  return Message_Job_reflection_;
}

// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Message_Firewall_Command_ActionType_descriptor() {
  if (Message_Firewall_Command_ActionType_descriptor_ == NULL) protobuf_BuildDesc_message_2eproto();
  return Message_Firewall_Command_ActionType_descriptor_;
}
bool Message_Firewall_Command_ActionType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Message_Firewall_Command_ActionType Message_Firewall_Command::UNKNOWN;
const Message_Firewall_Command_ActionType Message_Firewall_Command::DENY_ALL;
const Message_Firewall_Command_ActionType Message_Firewall_Command::DENY_VM;
const Message_Firewall_Command_ActionType Message_Firewall_Command::ALLOW_VM;
const Message_Firewall_Command_ActionType Message_Firewall_Command::ALLOW_ALL;
const Message_Firewall_Command_ActionType Message_Firewall_Command::ActionType_MIN;
const Message_Firewall_Command_ActionType Message_Firewall_Command::ActionType_MAX;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Message_Firewall_Command_ResponseType_descriptor() {
  if (Message_Firewall_Command_ResponseType_descriptor_ == NULL) protobuf_BuildDesc_message_2eproto();
  return Message_Firewall_Command_ResponseType_descriptor_;
}
bool Message_Firewall_Command_ResponseType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Message_Firewall_Command_ResponseType Message_Firewall_Command::ERROR;
const Message_Firewall_Command_ResponseType Message_Firewall_Command::OK;
const Message_Firewall_Command_ResponseType Message_Firewall_Command::ResponseType_MIN;
const Message_Firewall_Command_ResponseType Message_Firewall_Command::ResponseType_MAX;
#endif  // _MSC_VER


const ::std::string Message_Firewall_Command::_default_err_message_;
const ::std::string Message_Firewall_Command::_default_chain_name_;
const ::std::string Message_Firewall_Command::_default_mac_address_;
const ::std::string Message_Firewall_Command::_default_ip_address_;
const ::std::string Message_Firewall_Command::_default_protocol_;

Message_Firewall_Command::Message_Firewall_Command()
  : ::google::protobuf::Message(),
    _cached_size_(0),
    action_(1),
    response_(1),
    err_message_(const_cast< ::std::string*>(&_default_err_message_)),
    chain_name_(const_cast< ::std::string*>(&_default_chain_name_)),
    mac_address_(const_cast< ::std::string*>(&_default_mac_address_)),
    ip_address_(const_cast< ::std::string*>(&_default_ip_address_)),
    protocol_(const_cast< ::std::string*>(&_default_protocol_)) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

void Message_Firewall_Command::InitAsDefaultInstance() {}

Message_Firewall_Command::Message_Firewall_Command(const Message_Firewall_Command& from)
  : ::google::protobuf::Message(),
    _cached_size_(0),
    action_(1),
    response_(1),
    err_message_(const_cast< ::std::string*>(&_default_err_message_)),
    chain_name_(const_cast< ::std::string*>(&_default_chain_name_)),
    mac_address_(const_cast< ::std::string*>(&_default_mac_address_)),
    ip_address_(const_cast< ::std::string*>(&_default_ip_address_)),
    protocol_(const_cast< ::std::string*>(&_default_protocol_)) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

Message_Firewall_Command::~Message_Firewall_Command() {
  if (err_message_ != &_default_err_message_) {
    delete err_message_;
  }
  if (chain_name_ != &_default_chain_name_) {
    delete chain_name_;
  }
  if (mac_address_ != &_default_mac_address_) {
    delete mac_address_;
  }
  if (ip_address_ != &_default_ip_address_) {
    delete ip_address_;
  }
  if (protocol_ != &_default_protocol_) {
    delete protocol_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Message_Firewall_Command::descriptor() {
  if (Message_Firewall_Command_descriptor_ == NULL) protobuf_BuildDesc_message_2eproto();
  return Message_Firewall_Command_descriptor_;
}

const Message_Firewall_Command& Message_Firewall_Command::default_instance() {
  if (default_instance_ == NULL) protobuf_BuildDesc_message_2eproto();
  return *default_instance_;
}

Message_Firewall_Command* Message_Firewall_Command::default_instance_ = NULL;

Message_Firewall_Command* Message_Firewall_Command::New() const {
  return new Message_Firewall_Command;
}

void Message_Firewall_Command::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    action_ = 1;
    response_ = 1;
    if (_has_bit(2)) {
      if (err_message_ != &_default_err_message_) {
        err_message_->clear();
      }
    }
    if (_has_bit(3)) {
      if (chain_name_ != &_default_chain_name_) {
        chain_name_->clear();
      }
    }
    if (_has_bit(4)) {
      if (mac_address_ != &_default_mac_address_) {
        mac_address_->clear();
      }
    }
    if (_has_bit(5)) {
      if (ip_address_ != &_default_ip_address_) {
        ip_address_->clear();
      }
    }
    if (_has_bit(6)) {
      if (protocol_ != &_default_protocol_) {
        protocol_->clear();
      }
    }
  }
  port_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message_Firewall_Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required .HoneyClient.Message.Firewall.Command.ActionType action = 1 [default = UNKNOWN];
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormat::ReadEnum(input, &value));
        if (::HoneyClient::Message_Firewall_Command_ActionType_IsValid(value)) {
          set_action(static_cast< ::HoneyClient::Message_Firewall_Command_ActionType >(value));
        } else {
          mutable_unknown_fields()->AddField(1)->add_varint(value);
        }
        if (input->ExpectTag(16)) goto parse_response;
        break;
      }
      
      // optional .HoneyClient.Message.Firewall.Command.ResponseType response = 2 [default = ERROR];
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_response:
        int value;
        DO_(::google::protobuf::internal::WireFormat::ReadEnum(input, &value));
        if (::HoneyClient::Message_Firewall_Command_ResponseType_IsValid(value)) {
          set_response(static_cast< ::HoneyClient::Message_Firewall_Command_ResponseType >(value));
        } else {
          mutable_unknown_fields()->AddField(2)->add_varint(value);
        }
        if (input->ExpectTag(26)) goto parse_err_message;
        break;
      }
      
      // optional string err_message = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_err_message:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_err_message()));
        if (input->ExpectTag(34)) goto parse_chain_name;
        break;
      }
      
      // optional string chain_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_chain_name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_chain_name()));
        if (input->ExpectTag(42)) goto parse_mac_address;
        break;
      }
      
      // optional string mac_address = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_mac_address:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_mac_address()));
        if (input->ExpectTag(50)) goto parse_ip_address;
        break;
      }
      
      // optional string ip_address = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ip_address:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_ip_address()));
        if (input->ExpectTag(58)) goto parse_protocol;
        break;
      }
      
      // optional string protocol = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_protocol:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_protocol()));
        if (input->ExpectTag(64)) goto parse_port;
        break;
      }
      
      // repeated uint32 port = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_port:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_port(value);
        if (input->ExpectTag(64)) goto parse_port;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

bool Message_Firewall_Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  // required .HoneyClient.Message.Firewall.Command.ActionType action = 1 [default = UNKNOWN];
  if (_has_bit(0)) {
    DO_(::google::protobuf::internal::WireFormat::WriteEnum(1, this->action(), output));
  }
  
  // optional .HoneyClient.Message.Firewall.Command.ResponseType response = 2 [default = ERROR];
  if (_has_bit(1)) {
    DO_(::google::protobuf::internal::WireFormat::WriteEnum(2, this->response(), output));
  }
  
  // optional string err_message = 3;
  if (_has_bit(2)) {
    DO_(::google::protobuf::internal::WireFormat::WriteString(3, this->err_message(), output));
  }
  
  // optional string chain_name = 4;
  if (_has_bit(3)) {
    DO_(::google::protobuf::internal::WireFormat::WriteString(4, this->chain_name(), output));
  }
  
  // optional string mac_address = 5;
  if (_has_bit(4)) {
    DO_(::google::protobuf::internal::WireFormat::WriteString(5, this->mac_address(), output));
  }
  
  // optional string ip_address = 6;
  if (_has_bit(5)) {
    DO_(::google::protobuf::internal::WireFormat::WriteString(6, this->ip_address(), output));
  }
  
  // optional string protocol = 7;
  if (_has_bit(6)) {
    DO_(::google::protobuf::internal::WireFormat::WriteString(7, this->protocol(), output));
  }
  
  // repeated uint32 port = 8;
  for (int i = 0; i < port_.size(); i++) {
    DO_(::google::protobuf::internal::WireFormat::WriteUInt32(8, this->port(i), output));
  }
  
  if (!unknown_fields().empty()) {
    DO_(::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output));
  }
  return true;
#undef DO_
}

int Message_Firewall_Command::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HoneyClient.Message.Firewall.Command.ActionType action = 1 [default = UNKNOWN];
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::EnumSize(this->action());
    }
    
    // optional .HoneyClient.Message.Firewall.Command.ResponseType response = 2 [default = ERROR];
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::EnumSize(this->response());
    }
    
    // optional string err_message = 3;
    if (has_err_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->err_message());
    }
    
    // optional string chain_name = 4;
    if (has_chain_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->chain_name());
    }
    
    // optional string mac_address = 5;
    if (has_mac_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->mac_address());
    }
    
    // optional string ip_address = 6;
    if (has_ip_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->ip_address());
    }
    
    // optional string protocol = 7;
    if (has_protocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->protocol());
    }
    
  }
  // repeated uint32 port = 8;
  total_size += 1 * port_size();
  for (int i = 0; i < port_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormat::UInt32Size(
      this->port(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Message_Firewall_Command::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message_Firewall_Command* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message_Firewall_Command*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message_Firewall_Command::MergeFrom(const Message_Firewall_Command& from) {
  GOOGLE_CHECK_NE(&from, this);
  port_.MergeFrom(from.port_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_action(from.action());
    }
    if (from._has_bit(1)) {
      set_response(from.response());
    }
    if (from._has_bit(2)) {
      set_err_message(from.err_message());
    }
    if (from._has_bit(3)) {
      set_chain_name(from.chain_name());
    }
    if (from._has_bit(4)) {
      set_mac_address(from.mac_address());
    }
    if (from._has_bit(5)) {
      set_ip_address(from.ip_address());
    }
    if (from._has_bit(6)) {
      set_protocol(from.protocol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message_Firewall_Command::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_Firewall_Command::CopyFrom(const Message_Firewall_Command& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_Firewall_Command::Swap(Message_Firewall_Command* other) {
  if (other != this) {
    std::swap(action_, other->action_);
    std::swap(response_, other->response_);
    std::swap(err_message_, other->err_message_);
    std::swap(chain_name_, other->chain_name_);
    std::swap(mac_address_, other->mac_address_);
    std::swap(ip_address_, other->ip_address_);
    std::swap(protocol_, other->protocol_);
    port_.Swap(&other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool Message_Firewall_Command::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* Message_Firewall_Command::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* Message_Firewall_Command::GetReflection() const {
  if (Message_Firewall_Command_reflection_ == NULL) protobuf_BuildDesc_message_2eproto();
  return Message_Firewall_Command_reflection_;
}

// -------------------------------------------------------------------

Message_Firewall::Message_Firewall()
  : ::google::protobuf::Message(),
    _cached_size_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

void Message_Firewall::InitAsDefaultInstance() {}

Message_Firewall::Message_Firewall(const Message_Firewall& from)
  : ::google::protobuf::Message(),
    _cached_size_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

Message_Firewall::~Message_Firewall() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Message_Firewall::descriptor() {
  if (Message_Firewall_descriptor_ == NULL) protobuf_BuildDesc_message_2eproto();
  return Message_Firewall_descriptor_;
}

const Message_Firewall& Message_Firewall::default_instance() {
  if (default_instance_ == NULL) protobuf_BuildDesc_message_2eproto();
  return *default_instance_;
}

Message_Firewall* Message_Firewall::default_instance_ = NULL;

Message_Firewall* Message_Firewall::New() const {
  return new Message_Firewall;
}

void Message_Firewall::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message_Firewall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

bool Message_Firewall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  if (!unknown_fields().empty()) {
    DO_(::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output));
  }
  return true;
#undef DO_
}

int Message_Firewall::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Message_Firewall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message_Firewall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message_Firewall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message_Firewall::MergeFrom(const Message_Firewall& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message_Firewall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_Firewall::CopyFrom(const Message_Firewall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_Firewall::Swap(Message_Firewall* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool Message_Firewall::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* Message_Firewall::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* Message_Firewall::GetReflection() const {
  if (Message_Firewall_reflection_ == NULL) protobuf_BuildDesc_message_2eproto();
  return Message_Firewall_reflection_;
}

// -------------------------------------------------------------------

Message::Message()
  : ::google::protobuf::Message(),
    _cached_size_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

void Message::InitAsDefaultInstance() {}

Message::Message(const Message& from)
  : ::google::protobuf::Message(),
    _cached_size_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

Message::~Message() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Message::descriptor() {
  if (Message_descriptor_ == NULL) protobuf_BuildDesc_message_2eproto();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_BuildDesc_message_2eproto();
  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New() const {
  return new Message;
}

void Message::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

bool Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  if (!unknown_fields().empty()) {
    DO_(::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output));
  }
  return true;
#undef DO_
}

int Message::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::Swap(Message* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool Message::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* Message::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* Message::GetReflection() const {
  if (Message_reflection_ == NULL) protobuf_BuildDesc_message_2eproto();
  return Message_reflection_;
}

}  // namespace HoneyClient
